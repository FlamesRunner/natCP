// Generated by CoffeeScript 1.9.0
(function() {
  var doc, endsWith, esprima, isArray, isFunction, isNull, isUndefined, startsWith, _ref;

  _ref = require('lodash-node'), isArray = _ref.isArray, isFunction = _ref.isFunction, isNull = _ref.isNull, isUndefined = _ref.isUndefined;

  esprima = require('esprima-fb');

  endsWith = function(str, suffix) {
    "Checks whether a given string ends with `suffix`";
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  startsWith = function(str, prefix) {
    "Checks whether a given string starts with `prefix`";
    return str.slice(0, prefix.length) === prefix;
  };

  doc = function(val) {
    "Extracts as much documentation information from an object as possible\n\nThe docstring is determined by looking at `.__doc__` and if that is\nset, using that.\nIf that is not found, then `.constructor.__doc__` is examined, and if\nthat is not found, then the\n\nIf none of those are set, then in a function definition,\nif the first token inside the function body is a string literal,\nthen that is the docstring; if the first token is anything else,\nthen the function is not considered to have a docstring.\n";
    var actualVal, docString, first, functionBodyParseTree, info, isCoWrapped, isFibrous, isFunctionStar, isInstapromise, isNative, name, params, parseTree, s, ty, x, _ref1, _ref2;
    if (isUndefined(val)) {
      return {
        type: 'Undefined'
      };
    }
    if (isNull(val)) {
      return {
        type: 'Null'
      };
    }
    isNative = false;
    isFibrous = false;
    isCoWrapped = false;
    actualVal = void 0;
    ty = typeof val;
    if (ty != null) {
      ty = ty.charAt(0).toUpperCase() + ty.slice(1);
    }
    docString = null;
    if (val.__doc__ != null) {
      docString = val.__doc__.toString();
    } else {
      if ((val.constructor != null) && (val.constructor.__doc__ != null)) {
        docString = val.constructor.__doc__.toString();
      }
    }
    if (isFunction(val)) {
      if (isFunction(val.__fibrousFn__)) {
        ty = 'fibrous Function';
        actualVal = val;
        val = val.__fibrousFn__;
        isFibrous = true;
      } else if (isFunction(val.__generatorFunction__)) {
        ty = 'co.wrap Function';
        actualVal = val;
        val = val.__generatorFunction__;
        isCoWrapped = true;
      } else if (isFunction(val.___instapromiseOriginalFunction___)) {
        ty = 'instapromise Function';
        actualVal = val;
        val = val.___instapromiseOriginalFunction___;
        isInstapromise = true;
      }
      s = val.toString();
      if (endsWith(s, ") { [native code] }")) {
        isNative = true;
        docString = "[native code]";
        s = s.replace("[native code]", "");
      }
      if (startsWith(s, "function*")) {
        isFunctionStar = true;
        ty = 'Function*';
      }
      parseTree = esprima.parse("(" + s + ")");
      params = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = parseTree.body[0].expression.params;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          _results.push(x.name);
        }
        return _results;
      })();
      functionBodyParseTree = parseTree.body[0].expression.body.body;
      if (docString == null) {
        if (functionBodyParseTree.length) {
          first = functionBodyParseTree[0];
          if (first.type === 'ExpressionStatement' && first.expression.type === 'Literal') {
            docString = first.expression.value;
          }
        }
      }
    }
    name = (_ref1 = (_ref2 = val.name) != null ? _ref2 : val.__name__) != null ? _ref1 : null;
    if (isArray(val)) {
      ty = 'Array';
    }
    info = {
      params: params,
      doc: docString,
      name: name,
      type: ty
    };
    if (isNative) {
      info.nativeCode = isNative;
    }
    if (isFibrous) {
      info.isFibrous = isFibrous;
    }
    if (isFunctionStar) {
      info.isFunctionStar = isFunctionStar;
    }
    if (isCoWrapped) {
      info.isCoWrapped = isCoWrapped;
    }
    if (isInstapromise) {
      info.isInstapromise = isInstapromise;
    }
    if (isFunction(val)) {
      info.code = val.toString();
    }
    if (actualVal != null) {
      info.actualVal = actualVal;
    }
    return info;
  };

  module.exports = doc;

}).call(this);
